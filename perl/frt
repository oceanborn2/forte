#!/usr/bin/perl -w


# Un package pour traiter des fichiers FORTE

# package Forte;

# make_forte_script : Créer un analyseur de code Forté en permettant de passer un script à éxécuter
# en paramètre. De plus, on peut préciser des expressions régulières pour les projets et les classes

sub make_forte_script
  {
     my $snippet    = $_[0];	    # Le script a exécuter
     my $project_re = $_[1];	    # Les projets à trouver
     my $project_sn = $_[2];	    # Action à mener quand un projet correspond à l'expression régulière
     my $class_re   = $_[3];	    # Les classes à trouver 
     my $class_sn   = $_[4];	    # Action à mener quand une classe correspond à l'expression régulière

     my $script = "";
     while ($line = <DATA>) 
     {
        chomp;
	print;
     }
   }

#$argc = scalar @ARGV;
#$fname= shift;
#print $fname;

#unless ($argc > 0) { die "Il faut preciser un nom de fichier a analyser"; }

# Affichage du nom de fichier unique
#$banner = "\n" x 3 . "Analyse ";
#if ($argc==1) { $banner .= "du fichier source @ARGV"; }
#else { $banner .= "des fichiers sources : @ARGV"; }
#print $banner;

# Recherche de la chaine dans le(s) fichier(s)

#print "\n";
#print "Recherche en cours ...";
#print "\n";


__DATA__

$projectname = "";
$clsname   = "";
$methodname  = "";
$methodsig   = "";
$methodre = "^method ([a-zA-Z0-9_]+)\.([a-zA-Z0-9_]+)";
 
while (defined($st))
{
   chomp;
   if (/^begin TOOL ([a-zA-Z0-9_]+)/)
   {
       $projectname = $1;
       print "Analyse du projet $projectname\n";
   }		 
   elsif (/"end $projectname"/)
   {
       $projectname = "";
   }
   elsif (/^class ([a-zA-Z0-9_]+)/)
   {
       $clsname = $1;
       print "Analyse de la classe $clsname\n";
   }
   elsif (/end class/) 
   {
       $clsname = "";
   }
   elsif (/$methodre/)
   {
       print "ON A TROUVE UNE METHODE !!!";
       if (!($clsname ne $1)) { die "Le nom de la classe n'est pas coherent : \[$clsname,$1\]"; }
       $methodname = $2;
       s/$methodre//; # supprimer la premiere partie de la declaration de la methode
       $methodsig = "";
       if (/(\(.*)/) # Detection d'une liste de parametres pour la methode 
       { 
           $methodsig = $1; 
	   do 
	   { $_ = <>; # Lecture de la ligne qui suit 
	     $methodsig .= $_;
	   }
	   until ($_ ~= /^begin/);
       }
       print "Signature de la methode : $methodname::$methodsig\n";
   }  
}
     
